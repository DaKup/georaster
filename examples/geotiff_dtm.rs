use georaster::geotiff::{GeoTiffReader, RasterValue};
use std::fs::File;
use std::io::BufReader;

fn main() {
    let img_file =
        BufReader::new(File::open("data/N265E425.tif").expect("Cannot find test image!"));
    let mut tiff = GeoTiffReader::open(img_file).expect("Cannot create decoder");
    // Decoder {
    //     reader: SmartReader {
    //         reader: File {
    //             fd: 3,
    //             path: "data/N265E425.tif",
    //             read: true,
    //             write: false,
    //         },
    //         byte_order: LittleEndian,
    //     },
    //     bigtiff: false,
    //     limits: Limits {
    //         decoding_buffer_size: 268435456,
    //         ifd_value_size: 1048576,
    //         intermediate_buffer_size: 134217728,
    //         _non_exhaustive: (),
    //     },
    //     current_chunk: 0,
    //     next_ifd: Some(
    //         708,
    //     ),
    //     ifd_offsets: [
    //         192,
    //         708,
    //     ],
    //     seen_ifds: {
    //         192,
    //         708,
    //     },
    //     image: Image {
    //         ifd: Some(
    //             {
    //                 PlanarConfiguration: Entry { type_: SHORT, count: 1, offset: [1, 0, 0, 0, 0, 0, 0, 0] },
    //                 TileLength: Entry { type_: SHORT, count: 1, offset: [0, 2, 0, 0, 0, 0, 0, 0] },
    //                 Compression: Entry { type_: SHORT, count: 1, offset: [8, 0, 0, 0, 0, 0, 0, 0] },
    //                 TileOffsets: Entry { type_: LONG, count: 100, offset: [172, 5, 0, 0, 0, 0, 0, 0] },
    //                 ModelPixelScaleTag: Entry { type_: DOUBLE, count: 3, offset: [170, 1, 0, 0, 0, 0, 0, 0] },
    //                 Predictor: Entry { type_: SHORT, count: 1, offset: [1, 0, 0, 0, 0, 0, 0, 0] },
    //                 SamplesPerPixel: Entry { type_: SHORT, count: 1, offset: [1, 0, 0, 0, 0, 0, 0, 0] },
    //                 ModelTiepointTag: Entry { type_: DOUBLE, count: 6, offset: [194, 1, 0, 0, 0, 0, 0, 0] },
    //                 ImageWidth: Entry { type_: SHORT, count: 1, offset: [136, 19, 0, 0, 0, 0, 0, 0] },
    //                 BitsPerSample: Entry { type_: SHORT, count: 1, offset: [16, 0, 0, 0, 0, 0, 0, 0] },
    //                 ImageLength: Entry { type_: SHORT, count: 1, offset: [136, 19, 0, 0, 0, 0, 0, 0] },
    //                 SampleFormat: Entry { type_: SHORT, count: 1, offset: [1, 0, 0, 0, 0, 0, 0, 0] },
    //                 GeoDoubleParamsTag: Entry { type_: DOUBLE, count: 6, offset: [122, 2, 0, 0, 0, 0, 0, 0] },
    //                 GeoKeyDirectoryTag: Entry { type_: SHORT, count: 68, offset: [242, 1, 0, 0, 0, 0, 0, 0] },
    //                 PhotometricInterpretation: Entry { type_: SHORT, count: 1, offset: [1, 0, 0, 0, 0, 0, 0, 0] },
    //                 TileWidth: Entry { type_: SHORT, count: 1, offset: [0, 2, 0, 0, 0, 0, 0, 0] },
    //                 GeoAsciiParamsTag: Entry { type_: ASCII, count: 25, offset: [170, 2, 0, 0, 0, 0, 0, 0] },
    //                 GdalNodata: Entry { type_: ASCII, count: 2, offset: [48, 0, 0, 0, 0, 0, 0, 0] },
    //                 TileByteCounts: Entry { type_: LONG, count: 100, offset: [60, 7, 0, 0, 0, 0, 0, 0] },
    //             },
    //         ),
    //         width: 5000,
    //         height: 5000,
    //         bits_per_sample: [
    //             16,
    //         ],
    //         samples: 1,
    //         sample_format: [
    //             Uint,
    //         ],
    //         photometric_interpretation: BlackIsZero,
    //         compression_method: Deflate,
    //         predictor: None,
    //         jpeg_tables: None,
    //         chunk_type: Tile,
    //         strip_decoder: None,
    //         tile_attributes: Some(
    //             TileAttributes {
    //                 image_width: 5000,
    //                 image_height: 5000,
    //                 tile_width: 512,
    //                 tile_length: 512,
    //             },
    //         ),
    //         chunk_offsets: [
    //             8560602,
    //             8618308,
    //             8674494,
    //             8727680,
    //             8782035,
    //             8839822,
    //             8900152,
    //             8967680,
    //             9011149,
    //             9034693,
    //             9084011,
    //             9149582,
    //             9216254,
    //             9276205,
    //             9338368,
    //             9396987,
    //             9449653,
    //             9515063,
    //             9541200,
    //             9639346,
    //             9828858,
    //             9892666,
    //             9952982,
    //             10018490,
    //             10088368,
    //             10157667,
    //             10228993,
    //             10305918,
    //             10350244,
    //             10460259,
    //             10651242,
    //             10719798,
    //             10784824,
    //             10853188,
    //             10926388,
    //             11009178,
    //             11089903,
    //             11132795,
    //             11212106,
    //             11373503,
    //             11565025,
    //             11643915,
    //             11717762,
    //             11792792,
    //             11862603,
    //             11926387,
    //             11983725,
    //             12010837,
    //             12154253,
    //             12334326,
    //             12438270,
    //             12516032,
    //             12587577,
    //             12664757,
    //             12740319,
    //             12817620,
    //             12889775,
    //             12931395,
    //             13063897,
    //             13325063,
    //             13536264,
    //             13594003,
    //             13650152,
    //             13698160,
    //             13754356,
    //             13828805,
    //             13911075,
    //             13959173,
    //             14042498,
    //             14252715,
    //             14468206,
    //             14548534,
    //             14630529,
    //             14709728,
    //             14789668,
    //             14859544,
    //             14927487,
    //             14985797,
    //             15070804,
    //             15267848,
    //             15460267,
    //             15537798,
    //             15617910,
    //             15695547,
    //             15775570,
    //             15857946,
    //             15923413,
    //             15973477,
    //             16054348,
    //             16134797,
    //             16197977,
    //             16262359,
    //             16325743,
    //             16390509,
    //             16453520,
    //             16518896,
    //             16580642,
    //             16639840,
    //             16680387,
    //             16735122,
    //         ],
    //         chunk_bytes: [
    //             57698,
    //             56178,
    //             53178,
    //             54347,
    //             57779,
    //             60322,
    //             67520,
    //             43461,
    //             23536,
    //             49310,
    //             65563,
    //             66664,
    //             59943,
    //             62155,
    //             58611,
    //             52658,
    //             65402,
    //             26129,
    //             98138,
    //             189504,
    //             63800,
    //             60308,
    //             65500,
    //             69870,
    //             69291,
    //             71318,
    //             76917,
    //             44318,
    //             110007,
    //             190975,
    //             68548,
    //             65018,
    //             68356,
    //             73192,
    //             82782,
    //             80717,
    //             42884,
    //             79303,
    //             161389,
    //             191514,
    //             78882,
    //             73839,
    //             75022,
    //             69803,
    //             63776,
    //             57330,
    //             27104,
    //             143408,
    //             180065,
    //             103936,
    //             77754,
    //             71537,
    //             77172,
    //             75554,
    //             77293,
    //             72147,
    //             41612,
    //             132494,
    //             261158,
    //             211193,
    //             57731,
    //             56141,
    //             48000,
    //             56188,
    //             74441,
    //             82262,
    //             48090,
    //             83317,
    //             210209,
    //             215483,
    //             80320,
    //             81987,
    //             79191,
    //             79932,
    //             69868,
    //             67935,
    //             58302,
    //             84999,
    //             197036,
    //             192411,
    //             77523,
    //             80104,
    //             77629,
    //             80015,
    //             82368,
    //             65459,
    //             50056,
    //             80863,
    //             80441,
    //             63172,
    //             64374,
    //             63376,
    //             64758,
    //             63003,
    //             65368,
    //             61738,
    //             59190,
    //             40539,
    //             54727,
    //             46224,
    //         ],
    //     },
    // }

    assert_eq!(tiff.dimensions(), (5000, 5000));
    assert_eq!(tiff.colortype(), Some(tiff::ColorType::Gray(16)));
    assert_eq!(tiff.origin(), Some([4250000.0, 2700000.0]));
    assert_eq!(tiff.pixel_size(), Some([10.0, -10.0]));
    assert_eq!(
        tiff.geo_params,
        Some("ETRS89_ETRS_LAEA|ETRS89|".to_string())
    );

    // convert -quiet data/N265E425.tif[0] -crop 1x1+0+0 -depth 16 txt:
    assert_eq!(tiff.read_pixel(0, 0), RasterValue::U16(636));
    // convert -quiet data/N265E425.tif[0] -crop 1x1+4000+3000 -depth 16 txt:
    assert_eq!(tiff.read_pixel(4000, 3000), RasterValue::U16(1306));
    // x > width
    assert_eq!(tiff.read_pixel(5000, 3000), RasterValue::NoData);
    // y > height
    assert_eq!(tiff.read_pixel(4000, 5000), RasterValue::NoData);
    // convert -quiet data/N265E425.tif[0] -crop 2x2+511+511 -depth 16 txt:
    // 0,0: 680
    // 1,0: 684
    // 0,1: 681
    // 1,1: 685
    let mut pixels = tiff.pixels(511, 511, 2, 2);
    assert_eq!(pixels.next(), Some((511, 511, RasterValue::U16(680))));
    assert_eq!(pixels.next(), Some((512, 511, RasterValue::U16(684))));
    assert_eq!(pixels.next(), Some((511, 512, RasterValue::U16(681))));
    assert_eq!(pixels.next(), Some((512, 512, RasterValue::U16(685))));
    assert_eq!(pixels.next(), None);

    let pixels = tiff
        .pixels(510, 510, 4, 4)
        .map(|(x, y, _v)| (x, y))
        .collect::<Vec<_>>();
    assert_eq!(
        pixels,
        vec![
            (510, 510),
            (511, 510),
            (510, 511),
            (511, 511),
            (512, 510),
            (513, 510),
            (512, 511),
            (513, 511),
            (510, 512),
            (511, 512),
            (510, 513),
            (511, 513),
            (512, 512),
            (513, 512),
            (512, 513),
            (513, 513)
        ]
    );

    // Test 0
    let mut pixels = tiff.pixels(0, 0, 0, 0);
    assert_eq!(pixels.next(), Some((0, 0, RasterValue::U16(636))));
    assert_eq!(pixels.next(), None);
}
